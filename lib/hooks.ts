// Generated by @wagmi/cli@1.0.0 on 5/10/2023 at 7:45:24 PM
import { useContractRead, UseContractReadConfig } from 'wagmi'
import {
  getContract,
  GetContractArgs,
  readContract,
  ReadContractConfig,
} from 'wagmi/actions'
import { ReadContractResult } from 'wagmi/actions'

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// LibColorRGB
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const libColorRgbABI = [
  {
    stateMutability: 'pure',
    type: 'function',
    inputs: [{ name: '$color', internalType: 'uint24', type: 'uint24' }],
    name: 'b',
    outputs: [{ name: '$b', internalType: 'uint8', type: 'uint8' }],
  },
  {
    stateMutability: 'pure',
    type: 'function',
    inputs: [{ name: '$color', internalType: 'uint24', type: 'uint24' }],
    name: 'g',
    outputs: [{ name: '$g', internalType: 'uint8', type: 'uint8' }],
  },
  {
    stateMutability: 'pure',
    type: 'function',
    inputs: [{ name: '$color', internalType: 'uint24', type: 'uint24' }],
    name: 'hexadecimal',
    outputs: [{ name: '$hex', internalType: 'string', type: 'string' }],
  },
  {
    stateMutability: 'pure',
    type: 'function',
    inputs: [{ name: '$hex', internalType: 'bytes', type: 'bytes' }],
    name: 'number',
    outputs: [{ name: '$color', internalType: 'uint24', type: 'uint24' }],
  },
  {
    stateMutability: 'pure',
    type: 'function',
    inputs: [
      { name: '$r', internalType: 'uint8', type: 'uint8' },
      { name: '$g', internalType: 'uint8', type: 'uint8' },
      { name: '$b', internalType: 'uint8', type: 'uint8' },
    ],
    name: 'pack',
    outputs: [{ name: '$color', internalType: 'uint24', type: 'uint24' }],
  },
  {
    stateMutability: 'pure',
    type: 'function',
    inputs: [{ name: '$color', internalType: 'uint24', type: 'uint24' }],
    name: 'r',
    outputs: [{ name: '$r', internalType: 'uint8', type: 'uint8' }],
  },
  {
    stateMutability: 'pure',
    type: 'function',
    inputs: [{ name: '$color', internalType: 'uint24', type: 'uint24' }],
    name: 'rgb',
    outputs: [
      { name: '$r', internalType: 'uint8', type: 'uint8' },
      { name: '$g', internalType: 'uint8', type: 'uint8' },
      { name: '$b', internalType: 'uint8', type: 'uint8' },
    ],
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Core
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

/**
 * Wraps __{@link getContract}__ with `abi` set to __{@link libColorRgbABI}__.
 */
export function getLibColorRgb(config: Omit<GetContractArgs, 'abi'>) {
  return getContract({ abi: libColorRgbABI, ...config })
}

/**
 * Wraps __{@link readContract}__ with `abi` set to __{@link libColorRgbABI}__.
 */
export function readLibColorRgb<
  TAbi extends readonly unknown[] = typeof libColorRgbABI,
  TFunctionName extends string = string,
>(config: Omit<ReadContractConfig<TAbi, TFunctionName>, 'abi'>) {
  return readContract({
    abi: libColorRgbABI,
    ...config,
  } as unknown as ReadContractConfig<TAbi, TFunctionName>)
}

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// React
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link libColorRgbABI}__.
 */
export function useLibColorRgbRead<
  TFunctionName extends string,
  TSelectData = ReadContractResult<typeof libColorRgbABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof libColorRgbABI, TFunctionName, TSelectData>,
    'abi'
  > = {} as any,
) {
  return useContractRead({
    abi: libColorRgbABI,
    ...config,
  } as UseContractReadConfig<typeof libColorRgbABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link libColorRgbABI}__ and `functionName` set to `"b"`.
 */
export function useLibColorRgbB<
  TFunctionName extends 'b',
  TSelectData = ReadContractResult<typeof libColorRgbABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof libColorRgbABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: libColorRgbABI,
    functionName: 'b',
    ...config,
  } as UseContractReadConfig<typeof libColorRgbABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link libColorRgbABI}__ and `functionName` set to `"g"`.
 */
export function useLibColorRgbG<
  TFunctionName extends 'g',
  TSelectData = ReadContractResult<typeof libColorRgbABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof libColorRgbABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: libColorRgbABI,
    functionName: 'g',
    ...config,
  } as UseContractReadConfig<typeof libColorRgbABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link libColorRgbABI}__ and `functionName` set to `"hexadecimal"`.
 */
export function useLibColorRgbHexadecimal<
  TFunctionName extends 'hexadecimal',
  TSelectData = ReadContractResult<typeof libColorRgbABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof libColorRgbABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: libColorRgbABI,
    functionName: 'hexadecimal',
    ...config,
  } as UseContractReadConfig<typeof libColorRgbABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link libColorRgbABI}__ and `functionName` set to `"number"`.
 */
export function useLibColorRgbNumber<
  TFunctionName extends 'number',
  TSelectData = ReadContractResult<typeof libColorRgbABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof libColorRgbABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: libColorRgbABI,
    functionName: 'number',
    ...config,
  } as UseContractReadConfig<typeof libColorRgbABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link libColorRgbABI}__ and `functionName` set to `"pack"`.
 */
export function useLibColorRgbPack<
  TFunctionName extends 'pack',
  TSelectData = ReadContractResult<typeof libColorRgbABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof libColorRgbABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: libColorRgbABI,
    functionName: 'pack',
    ...config,
  } as UseContractReadConfig<typeof libColorRgbABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link libColorRgbABI}__ and `functionName` set to `"r"`.
 */
export function useLibColorRgbR<
  TFunctionName extends 'r',
  TSelectData = ReadContractResult<typeof libColorRgbABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof libColorRgbABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: libColorRgbABI,
    functionName: 'r',
    ...config,
  } as UseContractReadConfig<typeof libColorRgbABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link libColorRgbABI}__ and `functionName` set to `"rgb"`.
 */
export function useLibColorRgbRgb<
  TFunctionName extends 'rgb',
  TSelectData = ReadContractResult<typeof libColorRgbABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof libColorRgbABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: libColorRgbABI,
    functionName: 'rgb',
    ...config,
  } as UseContractReadConfig<typeof libColorRgbABI, TFunctionName, TSelectData>)
}
